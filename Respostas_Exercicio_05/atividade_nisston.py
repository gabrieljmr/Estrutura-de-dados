# -*- coding: utf-8 -*-
"""Atividade Nisston

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ecbNjtAmhmfOlkUcsfnIvdbCEEZ3zIFS
"""

nota1 = float(input("Insira sua primeira nota:"))
nota2 = float(input("Insira sua segunda nota:"))
nota3 = float(input("Insira sua terceira nota:"))

calculo = nota1 + nota2 + nota3
media = calculo / 3

print(f"Sua media foi {media}")

numero = int(input("Insira um numero:"))

if numero % 2 == 0:
     print(f"{numero} é um numero par")
else:
     print(f"{numero} é um numero impar")

numero = int(input("Digite um numero par:"))

print(f"Numeros pares de 0 ate {numero}: ")
for i in range(0, numero + 1, 2):
     print(i)

numeros = []

quantidade = int(input("Quantos números voce deseja inserir na lista? "))
for i in range(quantidade):
    numero = float(input(f"Digite o {i+1}º numero: "))
    numeros.append(numero)

maior_valor = max(numeros)
menor_valor = min(numeros)

print(f"O maior valor da lista é: {maior_valor}")
print(f"O menor valor da lista é: {menor_valor}")

def calcular_media_pares(lista):
    numeros_pares = [num for num in lista if num % 2 == 0]
    if not numeros_pares:
        return None
    return sum(numeros_pares) / len(numeros_pares)

numeros = []

quantidade = int(input("Quantos numeros voce deseja inserir na lista? "))
for i in range(quantidade):
     numero = float(input(f"Digite o {i+1}º numero: "))
     numeros.append(numero)

media_pares = calcular_media_pares(numeros)

if media_pares is not None:
    print(f"A média dos numeros pares é: {media_pares}")
else:
    print("Não há numeros pares na lista.")

numero = int(input("Digite um numero inteiro positivo: "))

if numero < 0:
    print("O umero deve ser positivo.")
else:
    fatorial = 1
    for i in range(1, numero + 1):
        fatorial = i
    print(f"O fatorial de {numero} é {fatorial}")

def fibonacci(n):
    if n <= 0:
         return []
    elif n == 1:
         return [0]
    elif n == 2:
         return [0, 1]

    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
         next_fib = fib_sequence[-1] + fib_sequence[-2]
         fib_sequence.append(next_fib)

    return fib_sequence

numero = int(input("Digite um valor para a sequencia de Fibonacci: "))
sequencia = fibonacci(numero)

print("Sequência de Fibonacci:")
for num in sequencia:
    print(num, end=" ")

def eh_primo(numero):
    if numero <= 1:
       return False
    if numero <= 3:
       return True:
    if numero % 2 == 0 or numero % 3 == 0:
       return False

    i = 5
    while i * I <= numero:
       if numero % i == 0 or numero % (i + 2) == 0:
          return False
       i += 6

    return True

numero = int(input("Digite um número: "))
if eh_primo(numero):
    print(f"{numero} é um numero primo.")
else:
    print(f"{numero} não é um numero primo")

def filtrar_nomes_comecando_com_A(lista_nomes):
    nomes_comecando_com_A = [none for none in lista_nomes if nome.startswith('A')]
    return nomes_comecando_com_A

quantidade = int(input("Quantos nomes você deseja inseri na lista? "))
nome = []
for i in range(quantidade):
      nome = input(f"Digite o {i+1}º nome: ")
      nomes.append(nome)

nomes_comecando_com_A = filtrar_nomes_comecando_com_A(nomes)

print("Nomes que começam com 'A':")
for nome in nomes_comecando_com_A:
    print(nome)

import random

def computador_escolhe():
    return random.choice(["pedra", "papel", "tesoura"])

def determina_vencedor(escolha_usuario, escolha_computador):
    if escolha_usuario == escolha_computador:
        return "Empate"

    if (escolha_usuario == "pedra" and escolha_computador == "tesoura") or \
       (escolha_usuario == "tesoura" and escolha_computador == "papel") or \
       (escolha_usuario == "papel" and escolha_computador == "pedra"):
        return "Usuário vence"

    return "Computador vence"

def jogo():
    # Solicita a escolha do usuário
    escolha_usuario = input("Escolha entre pedra, papel e tesoura: ").lower()

    while escolha_usuario not in ["pedra", "papel", "tesoura"]:
        print("Escolha inválida! Tente novamente.")
        escolha_usuario = input("Escolha entre pedra, papel e tesoura: ").lower()

    # Escolha do computador
    escolha_computador = computador_escolhe()
    print(f"Computador escolheu: {escolha_computador}")

    # Determina o vencedor
    resultado = determina_vencedor(escolha_usuario, escolha_computador)
    print(resultado)

if __name__ == "__main__":
    jogo()